// -*- mode: java -*-
package #PKG#;

import java.io.InputStream;
import java.sql.Blob;

/**
 * Row lists utility/factory.
 */
#CLA#
public final class RowLists {

    /**
     * Convinience alias for row list of 1 string column.
     */
    public static RowList1.Impl<String> stringList() {
        return rowList1(String.class);
    }

    /**
     * Convinience alias for row list of 1 string column.
     * @param values Initial values
     */
    public static RowList1.Impl<String> stringList(final String... values) {    
        RowList1.Impl<String> list = stringList();

        for (final String v : values) {
          list = list.append(v);
        }

        return list;
    }

    /**
     * Convinience alias for row list of 1 binary column.
     */
    public static RowList1.Impl<byte[]> binaryList() {
        return rowList1(byte[].class);
    }

    /**
     * Convinience alias for row list of 1 binary column.
     * @param values Initial values
     */
    public static RowList1.Impl<byte[]> binaryList(final byte[]... values) {
        RowList1.Impl<byte[]> list = binaryList();

        for (final byte[] v : values) {
          list = list.append(v);
        }

        return list;
    }

    /**
     * Convinience alias for row list of 1 blob column.
     */
    public static RowList1.Impl<Blob> blobList() {
        return rowList1(Blob.class);
    }

    /**
     * Convinience alias for row list of 1 blob column.
     * @param values Initial values
     */
    public static RowList1.Impl<Blob> blobList(final Blob... values) {
        RowList1.Impl<Blob> list = blobList();

        for (final Blob v : values) {
          list = list.append(v);
        }

        return list;
    }

    /**
     * Convinience alias for row list of 1 boolean column.
     */
    public static RowList1.Impl<Boolean> booleanList() {
        return rowList1(Boolean.TYPE);
    }

    /**
     * Convinience alias for row list of 1 boolean column.
     * @param values Initial values
     */
    public static RowList1.Impl<Boolean> booleanList(final Boolean... values) {
        RowList1.Impl<Boolean> list = booleanList();

        for (final Boolean v : values) {
          list = list.append(v);
        }

        return list;
    }

    /**
     * Convinience alias for row list of 1 byte column.
     */
    public static RowList1.Impl<Byte> byteList() {
        return rowList1(Byte.TYPE);
    }

    /**
     * Convinience alias for row list of 1 byte column.
     * @param values Initial values
     */
    public static RowList1.Impl<Byte> byteList(final Byte... values) {
        RowList1.Impl<Byte> list = byteList();

        for (final Byte v : values) {
          list = list.append(v);
        }

        return list;
    }

    /**
     * Convinience alias for row list of 1 short column.
     */
    public static RowList1.Impl<Short> shortList() {
        return rowList1(Short.TYPE);
    }

    /**
     * Convinience alias for row list of 1 short column.
     * @param values Initial values
     */
    public static RowList1.Impl<Short> shortList(final Short... values) {
        RowList1.Impl<Short> list = shortList();

        for (final Short v : values) {
          list = list.append(v);
        }

        return list;
    }

    /**
     * Convinience alias for row list of 1 int column.
     */
    public static RowList1.Impl<Integer> intList() {
        return rowList1(Integer.TYPE);
    }

    /**
     * Convinience alias for row list of 1 int column.
     * @param values Initial values
     */
    public static RowList1.Impl<Integer> intList(final Integer... values) {
        RowList1.Impl<Integer> list = intList();

        for (final Integer v : values) {
          list = list.append(v);
        }

        return list;
    }

    /**
     * Convinience alias for row list of 1 input stream column.
     */
    public static RowList1.Impl<InputStream> streamList() {
        return rowList1(InputStream.class);
    }

    /**
     * Convinience alias for row list of 1 int column.
     * @param values Initial values
     */
    public static RowList1.Impl<InputStream> streamList(final InputStream... values) {
        RowList1.Impl<InputStream> list = streamList();

        for (final InputStream v : values) {
          list = list.append(v);
        }

        return list;
    }

    /**
     * Convinience alias for row list of 1 long column.
     */
    public static RowList1.Impl<Long> longList() {
        return rowList1(Long.TYPE);
    }

    /**
     * Convinience alias for row list of 1 long column.
     * @param values Initial values
     */
    public static RowList1.Impl<Long> longList(final Long... values) {
        RowList1.Impl<Long> list = longList();

        for (final Long v : values) {
          list = list.append(v);
        }

        return list;
    }

    /**
     * Convinience alias for row list of 1 float column.
     */
    public static RowList1.Impl<Float> floatList() {
        return rowList1(Float.TYPE);
    }

    /**
     * Convinience alias for row list of 1 float column.
     * @param values Initial values
     */
    public static RowList1.Impl<Float> floatList(final Float... values) {
        RowList1.Impl<Float> list = floatList();

        for (final Float v : values) {
          list = list.append(v);
        }

        return list;
    }

    /**
     * Convinience alias for row list of 1 double column.
     */
    public static RowList1.Impl<Double> doubleList() {
        return rowList1(Double.TYPE);
    }

    /**
     * Convinience alias for row list of 1 double column.
     * @param values Initial values
     */
    public static RowList1.Impl<Double> doubleList(final Double... values) {
        RowList1.Impl<Double> list = doubleList();

        for (final Double v : values) {
          list = list.append(v);
        }

        return list;
    }

    /**
     * Convinience alias for row list of 1 big decimal column.
     */
    public static RowList1.Impl<java.math.BigDecimal> bigDecimalList() {
        return rowList1(java.math.BigDecimal.class);
    }

    /**
     * Convinience alias for row list of 1 big decimal column.
     * @param values Initial values
     */
    public static RowList1.Impl<java.math.BigDecimal> bigDecimalList(final java.math.BigDecimal... values) {
        RowList1.Impl<java.math.BigDecimal> list = bigDecimalList();

        for (final java.math.BigDecimal v : values) {
          list = list.append(v);
        }

        return list;
    }

    /**
     * Convinience alias for row list of 1 date column.
     */
    public static RowList1.Impl<java.sql.Date> dateList() {
        return rowList1(java.sql.Date.class);
    }

    /**
     * Convinience alias for row list of 1 date column.
     * @param values Initial values
     */
    public static RowList1.Impl<java.sql.Date> dateList(final java.sql.Date... values) {
        RowList1.Impl<java.sql.Date> list = dateList();

        for (final java.sql.Date v : values) {
          list = list.append(v);
        }

        return list;
    }

    /**
     * Convinience alias for row list of 1 time column.
     */
    public static RowList1.Impl<java.sql.Time> timeList() {
        return rowList1(java.sql.Time.class);
    }

    /**
     * Convinience alias for row list of 1 time column.
     * @param values Initial values
     */
    public static RowList1.Impl<java.sql.Time> timeList(final java.sql.Time... values) {

        RowList1.Impl<java.sql.Time> list = timeList();

        for (final java.sql.Time v : values) {
          list = list.append(v);
        }

        return list;
    }

    /**
     * Convinience alias for row list of 1 timestamp column.
     */
    public static RowList1.Impl<java.sql.Timestamp> timestampList() {
        return rowList1(java.sql.Timestamp.class);
    }

    /**
     * Convinience alias for row list of 1 timestamp column.
     * @param values Initial values
     */
    public static RowList1.Impl<java.sql.Timestamp> timestampList(final java.sql.Timestamp... values) {

        RowList1.Impl<java.sql.Timestamp> list = timestampList();

        for (final java.sql.Timestamp v : values) {
          list = list.append(v);
        }

        return list;
    }

    #F#
}
